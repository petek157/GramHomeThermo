
/Users/peterkoruga/Documents/p3e/Particle/Projects/GramThermo/HomeThermo/target/HomeThermo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f58  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a0f70  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000008  20000300  080a0f74  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000578  20000308  20000308  00030308  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a0f7c  080a0f7c  00020f7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a0fa4  080a0fa4  00020fa4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00082260  00000000  00000000  00020fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000c788  00000000  00000000  000a3208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e8d2  00000000  00000000  000af990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001710  00000000  00000000  000be262  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002778  00000000  00000000  000bf972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021810  00000000  00000000  000c20ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c3f6  00000000  00000000  000e38fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008fe1a  00000000  00000000  000ffcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00009f88  00000000  00000000  0018fb0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	5c 0d 0a 08                                         \...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 fe79 	bl	80a0d24 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 fe7e 	bl	80a0d3a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a0f74 	.word	0x080a0f74
 80a004c:	20000308 	.word	0x20000308
 80a0050:	20000308 	.word	0x20000308
 80a0054:	20000880 	.word	0x20000880
 80a0058:	20000880 	.word	0x20000880

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fc39 	bl	80a08d4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a0f38 	.word	0x080a0f38
 80a0084:	080a0f68 	.word	0x080a0f68

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f817 	bl	80a00c0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bbdb 	b.w	80a0850 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 b943 	b.w	80a0324 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
    // We are going to tell our device that D0 and D7 (which we named led1 and led2 respectively) are going to be output
    // (That means that we will be sending voltage to them, rather than monitoring voltage that comes from them)

    // It's important you do this here, inside the setup() function rather than outside it or in the loop function.

    pinMode(led1, OUTPUT);
 80a00b0:	4b02      	ldr	r3, [pc, #8]	; (80a00bc <setup+0xc>)
 80a00b2:	2101      	movs	r1, #1
 80a00b4:	8818      	ldrh	r0, [r3, #0]
 80a00b6:	f000 bc55 	b.w	80a0964 <pinMode>
 80a00ba:	bf00      	nop
 80a00bc:	20000300 	.word	0x20000300

080a00c0 <loop>:

// Next we have the loop function, the other essential part of a microcontroller program.
// This routine gets repeated over and over, as quickly as possible and as many times as possible, after the setup function is called.
// Note: Code that blocks for too long (like more than 5 seconds), can make weird things happen (like dropping the network connection).  The built-in delay function shown below safely interleaves required background activity, so arbitrarily long delays can safely be done if you need them.

void loop() {
 80a00c0:	b510      	push	{r4, lr}
    // To blink the LED, first we'll turn it on...
    digitalWrite(led1, HIGH);
 80a00c2:	4c09      	ldr	r4, [pc, #36]	; (80a00e8 <loop+0x28>)
 80a00c4:	2101      	movs	r1, #1
 80a00c6:	8820      	ldrh	r0, [r4, #0]
 80a00c8:	f000 fc5d 	bl	80a0986 <digitalWrite>

    // We'll leave it on for 1 second...
    delay(1000);
 80a00cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00d0:	f000 f930 	bl	80a0334 <delay>

    // Then we'll turn it off...
    digitalWrite(led1, LOW);
 80a00d4:	8820      	ldrh	r0, [r4, #0]
 80a00d6:	2100      	movs	r1, #0
 80a00d8:	f000 fc55 	bl	80a0986 <digitalWrite>

    // Wait 1 second...
    delay(1000);

    // And repeat!
 80a00dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Then we'll turn it off...
    digitalWrite(led1, LOW);

    // Wait 1 second...
    delay(1000);
 80a00e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a00e4:	f000 b926 	b.w	80a0334 <delay>
 80a00e8:	20000300 	.word	0x20000300

080a00ec <_GLOBAL__sub_I_led1>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00ec:	f000 b818 	b.w	80a0120 <HAL_Pin_Map>

080a00f0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a00f0:	b508      	push	{r3, lr}
 80a00f2:	4b02      	ldr	r3, [pc, #8]	; (80a00fc <os_mutex_create+0xc>)
 80a00f4:	681b      	ldr	r3, [r3, #0]
 80a00f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a00f8:	9301      	str	r3, [sp, #4]
 80a00fa:	bd08      	pop	{r3, pc}
 80a00fc:	080601d0 	.word	0x080601d0

080a0100 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0100:	b508      	push	{r3, lr}
 80a0102:	4b02      	ldr	r3, [pc, #8]	; (80a010c <HAL_RNG_GetRandomNumber+0xc>)
 80a0104:	681b      	ldr	r3, [r3, #0]
 80a0106:	685b      	ldr	r3, [r3, #4]
 80a0108:	9301      	str	r3, [sp, #4]
 80a010a:	bd08      	pop	{r3, pc}
 80a010c:	0806019c 	.word	0x0806019c

080a0110 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0110:	b508      	push	{r3, lr}
 80a0112:	4b02      	ldr	r3, [pc, #8]	; (80a011c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0114:	681b      	ldr	r3, [r3, #0]
 80a0116:	695b      	ldr	r3, [r3, #20]
 80a0118:	9301      	str	r3, [sp, #4]
 80a011a:	bd08      	pop	{r3, pc}
 80a011c:	0806019c 	.word	0x0806019c

080a0120 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0120:	b508      	push	{r3, lr}
 80a0122:	4b02      	ldr	r3, [pc, #8]	; (80a012c <HAL_Pin_Map+0xc>)
 80a0124:	681b      	ldr	r3, [r3, #0]
 80a0126:	681b      	ldr	r3, [r3, #0]
 80a0128:	9301      	str	r3, [sp, #4]
 80a012a:	bd08      	pop	{r3, pc}
 80a012c:	080601b0 	.word	0x080601b0

080a0130 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0130:	b508      	push	{r3, lr}
 80a0132:	4b02      	ldr	r3, [pc, #8]	; (80a013c <HAL_Pin_Mode+0xc>)
 80a0134:	681b      	ldr	r3, [r3, #0]
 80a0136:	689b      	ldr	r3, [r3, #8]
 80a0138:	9301      	str	r3, [sp, #4]
 80a013a:	bd08      	pop	{r3, pc}
 80a013c:	080601b0 	.word	0x080601b0

080a0140 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0140:	b508      	push	{r3, lr}
 80a0142:	4b02      	ldr	r3, [pc, #8]	; (80a014c <HAL_Get_Pin_Mode+0xc>)
 80a0144:	681b      	ldr	r3, [r3, #0]
 80a0146:	68db      	ldr	r3, [r3, #12]
 80a0148:	9301      	str	r3, [sp, #4]
 80a014a:	bd08      	pop	{r3, pc}
 80a014c:	080601b0 	.word	0x080601b0

080a0150 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0150:	b508      	push	{r3, lr}
 80a0152:	4b02      	ldr	r3, [pc, #8]	; (80a015c <HAL_GPIO_Write+0xc>)
 80a0154:	681b      	ldr	r3, [r3, #0]
 80a0156:	691b      	ldr	r3, [r3, #16]
 80a0158:	9301      	str	r3, [sp, #4]
 80a015a:	bd08      	pop	{r3, pc}
 80a015c:	080601b0 	.word	0x080601b0

080a0160 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0160:	b508      	push	{r3, lr}
 80a0162:	4b02      	ldr	r3, [pc, #8]	; (80a016c <HAL_I2C_Write_Data+0xc>)
 80a0164:	681b      	ldr	r3, [r3, #0]
 80a0166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0168:	9301      	str	r3, [sp, #4]
 80a016a:	bd08      	pop	{r3, pc}
 80a016c:	080601ac 	.word	0x080601ac

080a0170 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0170:	b508      	push	{r3, lr}
 80a0172:	4b02      	ldr	r3, [pc, #8]	; (80a017c <HAL_I2C_Available_Data+0xc>)
 80a0174:	681b      	ldr	r3, [r3, #0]
 80a0176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0178:	9301      	str	r3, [sp, #4]
 80a017a:	bd08      	pop	{r3, pc}
 80a017c:	080601ac 	.word	0x080601ac

080a0180 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0180:	b508      	push	{r3, lr}
 80a0182:	4b02      	ldr	r3, [pc, #8]	; (80a018c <HAL_I2C_Read_Data+0xc>)
 80a0184:	681b      	ldr	r3, [r3, #0]
 80a0186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0188:	9301      	str	r3, [sp, #4]
 80a018a:	bd08      	pop	{r3, pc}
 80a018c:	080601ac 	.word	0x080601ac

080a0190 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0190:	b508      	push	{r3, lr}
 80a0192:	4b02      	ldr	r3, [pc, #8]	; (80a019c <HAL_I2C_Peek_Data+0xc>)
 80a0194:	681b      	ldr	r3, [r3, #0]
 80a0196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0198:	9301      	str	r3, [sp, #4]
 80a019a:	bd08      	pop	{r3, pc}
 80a019c:	080601ac 	.word	0x080601ac

080a01a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a01a0:	b508      	push	{r3, lr}
 80a01a2:	4b02      	ldr	r3, [pc, #8]	; (80a01ac <HAL_I2C_Flush_Data+0xc>)
 80a01a4:	681b      	ldr	r3, [r3, #0]
 80a01a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a01a8:	9301      	str	r3, [sp, #4]
 80a01aa:	bd08      	pop	{r3, pc}
 80a01ac:	080601ac 	.word	0x080601ac

080a01b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a01b0:	b508      	push	{r3, lr}
 80a01b2:	4b02      	ldr	r3, [pc, #8]	; (80a01bc <HAL_I2C_Is_Enabled+0xc>)
 80a01b4:	681b      	ldr	r3, [r3, #0]
 80a01b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a01b8:	9301      	str	r3, [sp, #4]
 80a01ba:	bd08      	pop	{r3, pc}
 80a01bc:	080601ac 	.word	0x080601ac

080a01c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a01c0:	b508      	push	{r3, lr}
 80a01c2:	4b03      	ldr	r3, [pc, #12]	; (80a01d0 <HAL_I2C_Init+0x10>)
 80a01c4:	681b      	ldr	r3, [r3, #0]
 80a01c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a01ca:	9301      	str	r3, [sp, #4]
 80a01cc:	bd08      	pop	{r3, pc}
 80a01ce:	0000      	.short	0x0000
 80a01d0:	080601ac 	.word	0x080601ac

080a01d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a01d4:	b508      	push	{r3, lr}
 80a01d6:	4b02      	ldr	r3, [pc, #8]	; (80a01e0 <HAL_SPI_Init+0xc>)
 80a01d8:	681b      	ldr	r3, [r3, #0]
 80a01da:	69db      	ldr	r3, [r3, #28]
 80a01dc:	9301      	str	r3, [sp, #4]
 80a01de:	bd08      	pop	{r3, pc}
 80a01e0:	080601b4 	.word	0x080601b4

080a01e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a01e4:	b508      	push	{r3, lr}
 80a01e6:	4b02      	ldr	r3, [pc, #8]	; (80a01f0 <HAL_SPI_Is_Enabled+0xc>)
 80a01e8:	681b      	ldr	r3, [r3, #0]
 80a01ea:	6a1b      	ldr	r3, [r3, #32]
 80a01ec:	9301      	str	r3, [sp, #4]
 80a01ee:	bd08      	pop	{r3, pc}
 80a01f0:	080601b4 	.word	0x080601b4

080a01f4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a01f4:	b508      	push	{r3, lr}
 80a01f6:	4b02      	ldr	r3, [pc, #8]	; (80a0200 <HAL_USART_Init+0xc>)
 80a01f8:	681b      	ldr	r3, [r3, #0]
 80a01fa:	699b      	ldr	r3, [r3, #24]
 80a01fc:	9301      	str	r3, [sp, #4]
 80a01fe:	bd08      	pop	{r3, pc}
 80a0200:	080601c4 	.word	0x080601c4

080a0204 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0204:	b508      	push	{r3, lr}
 80a0206:	4b02      	ldr	r3, [pc, #8]	; (80a0210 <HAL_USART_Write_Data+0xc>)
 80a0208:	681b      	ldr	r3, [r3, #0]
 80a020a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a020c:	9301      	str	r3, [sp, #4]
 80a020e:	bd08      	pop	{r3, pc}
 80a0210:	080601c4 	.word	0x080601c4

080a0214 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0214:	b508      	push	{r3, lr}
 80a0216:	4b02      	ldr	r3, [pc, #8]	; (80a0220 <HAL_USART_Available_Data+0xc>)
 80a0218:	681b      	ldr	r3, [r3, #0]
 80a021a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a021c:	9301      	str	r3, [sp, #4]
 80a021e:	bd08      	pop	{r3, pc}
 80a0220:	080601c4 	.word	0x080601c4

080a0224 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0224:	b508      	push	{r3, lr}
 80a0226:	4b02      	ldr	r3, [pc, #8]	; (80a0230 <HAL_USART_Read_Data+0xc>)
 80a0228:	681b      	ldr	r3, [r3, #0]
 80a022a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a022c:	9301      	str	r3, [sp, #4]
 80a022e:	bd08      	pop	{r3, pc}
 80a0230:	080601c4 	.word	0x080601c4

080a0234 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0234:	b508      	push	{r3, lr}
 80a0236:	4b02      	ldr	r3, [pc, #8]	; (80a0240 <HAL_USART_Peek_Data+0xc>)
 80a0238:	681b      	ldr	r3, [r3, #0]
 80a023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a023c:	9301      	str	r3, [sp, #4]
 80a023e:	bd08      	pop	{r3, pc}
 80a0240:	080601c4 	.word	0x080601c4

080a0244 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0244:	b508      	push	{r3, lr}
 80a0246:	4b02      	ldr	r3, [pc, #8]	; (80a0250 <HAL_USART_Flush_Data+0xc>)
 80a0248:	681b      	ldr	r3, [r3, #0]
 80a024a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a024c:	9301      	str	r3, [sp, #4]
 80a024e:	bd08      	pop	{r3, pc}
 80a0250:	080601c4 	.word	0x080601c4

080a0254 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0254:	b508      	push	{r3, lr}
 80a0256:	4b02      	ldr	r3, [pc, #8]	; (80a0260 <HAL_USART_Is_Enabled+0xc>)
 80a0258:	681b      	ldr	r3, [r3, #0]
 80a025a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a025c:	9301      	str	r3, [sp, #4]
 80a025e:	bd08      	pop	{r3, pc}
 80a0260:	080601c4 	.word	0x080601c4

080a0264 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0264:	b508      	push	{r3, lr}
 80a0266:	4b02      	ldr	r3, [pc, #8]	; (80a0270 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0268:	681b      	ldr	r3, [r3, #0]
 80a026a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a026c:	9301      	str	r3, [sp, #4]
 80a026e:	bd08      	pop	{r3, pc}
 80a0270:	080601c4 	.word	0x080601c4

080a0274 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0274:	b508      	push	{r3, lr}
 80a0276:	4b02      	ldr	r3, [pc, #8]	; (80a0280 <HAL_USB_USART_Init+0xc>)
 80a0278:	681b      	ldr	r3, [r3, #0]
 80a027a:	681b      	ldr	r3, [r3, #0]
 80a027c:	9301      	str	r3, [sp, #4]
 80a027e:	bd08      	pop	{r3, pc}
 80a0280:	080601d8 	.word	0x080601d8

080a0284 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0284:	b508      	push	{r3, lr}
 80a0286:	4b02      	ldr	r3, [pc, #8]	; (80a0290 <HAL_USB_USART_Available_Data+0xc>)
 80a0288:	681b      	ldr	r3, [r3, #0]
 80a028a:	691b      	ldr	r3, [r3, #16]
 80a028c:	9301      	str	r3, [sp, #4]
 80a028e:	bd08      	pop	{r3, pc}
 80a0290:	080601d8 	.word	0x080601d8

080a0294 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0294:	b508      	push	{r3, lr}
 80a0296:	4b02      	ldr	r3, [pc, #8]	; (80a02a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0298:	681b      	ldr	r3, [r3, #0]
 80a029a:	695b      	ldr	r3, [r3, #20]
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	bd08      	pop	{r3, pc}
 80a02a0:	080601d8 	.word	0x080601d8

080a02a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02a4:	b508      	push	{r3, lr}
 80a02a6:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <HAL_USB_USART_Receive_Data+0xc>)
 80a02a8:	681b      	ldr	r3, [r3, #0]
 80a02aa:	699b      	ldr	r3, [r3, #24]
 80a02ac:	9301      	str	r3, [sp, #4]
 80a02ae:	bd08      	pop	{r3, pc}
 80a02b0:	080601d8 	.word	0x080601d8

080a02b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02b4:	b508      	push	{r3, lr}
 80a02b6:	4b02      	ldr	r3, [pc, #8]	; (80a02c0 <HAL_USB_USART_Send_Data+0xc>)
 80a02b8:	681b      	ldr	r3, [r3, #0]
 80a02ba:	69db      	ldr	r3, [r3, #28]
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	bd08      	pop	{r3, pc}
 80a02c0:	080601d8 	.word	0x080601d8

080a02c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <HAL_USB_USART_Flush_Data+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	6a1b      	ldr	r3, [r3, #32]
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601d8 	.word	0x080601d8

080a02d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <set_system_mode+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	685b      	ldr	r3, [r3, #4]
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601a4 	.word	0x080601a4

080a02e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <system_delay_ms+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	695b      	ldr	r3, [r3, #20]
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601a4 	.word	0x080601a4

080a02f4 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <system_set_usb_request_app_handler+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601a4 	.word	0x080601a4

080a0304 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <system_set_usb_request_result+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601a4 	.word	0x080601a4

080a0314 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <network_ready+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	691b      	ldr	r3, [r3, #16]
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601c8 	.word	0x080601c8

080a0324 <free>:
#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
DYNALIB_FN(1, rt, free, void(void*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <free+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	685b      	ldr	r3, [r3, #4]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601a0 	.word	0x080601a0

080a0334 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0334:	2100      	movs	r1, #0
 80a0336:	f7ff bfd5 	b.w	80a02e4 <system_delay_ms>

080a033a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a033a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a033c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a033e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0340:	b113      	cbz	r3, 80a0348 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0342:	2203      	movs	r2, #3
 80a0344:	4601      	mov	r1, r0
 80a0346:	4798      	blx	r3
    }
 80a0348:	4620      	mov	r0, r4
 80a034a:	bd10      	pop	{r4, pc}

080a034c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a034c:	4770      	bx	lr

080a034e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a034e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0350:	4606      	mov	r6, r0
 80a0352:	4615      	mov	r5, r2
 80a0354:	460c      	mov	r4, r1
 80a0356:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0358:	42bc      	cmp	r4, r7
 80a035a:	d006      	beq.n	80a036a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a035c:	6833      	ldr	r3, [r6, #0]
 80a035e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0362:	689b      	ldr	r3, [r3, #8]
 80a0364:	4630      	mov	r0, r6
 80a0366:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0368:	e7f6      	b.n	80a0358 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a036a:	4628      	mov	r0, r5
 80a036c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a036e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a036e:	2200      	movs	r2, #0
 80a0370:	7c00      	ldrb	r0, [r0, #16]
 80a0372:	f7ff bef5 	b.w	80a0160 <HAL_I2C_Write_Data>

080a0376 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0376:	2100      	movs	r1, #0
 80a0378:	7c00      	ldrb	r0, [r0, #16]
 80a037a:	f7ff bef9 	b.w	80a0170 <HAL_I2C_Available_Data>

080a037e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a037e:	2100      	movs	r1, #0
 80a0380:	7c00      	ldrb	r0, [r0, #16]
 80a0382:	f7ff befd 	b.w	80a0180 <HAL_I2C_Read_Data>

080a0386 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0386:	2100      	movs	r1, #0
 80a0388:	7c00      	ldrb	r0, [r0, #16]
 80a038a:	f7ff bf01 	b.w	80a0190 <HAL_I2C_Peek_Data>

080a038e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a038e:	2100      	movs	r1, #0
 80a0390:	7c00      	ldrb	r0, [r0, #16]
 80a0392:	f7ff bf05 	b.w	80a01a0 <HAL_I2C_Flush_Data>

080a0396 <_ZN7TwoWireD0Ev>:
 80a0396:	b510      	push	{r4, lr}
 80a0398:	4604      	mov	r4, r0
 80a039a:	f7ff fe7e 	bl	80a009a <_ZdlPv>
 80a039e:	4620      	mov	r0, r4
 80a03a0:	bd10      	pop	{r4, pc}
	...

080a03a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a03a4:	b510      	push	{r4, lr}
 80a03a6:	4604      	mov	r4, r0
 80a03a8:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a03aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a03ae:	60a3      	str	r3, [r4, #8]
 80a03b0:	4b04      	ldr	r3, [pc, #16]	; (80a03c4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a03b2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a03b4:	7420      	strb	r0, [r4, #16]
 80a03b6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a03b8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a03ba:	f7ff ff01 	bl	80a01c0 <HAL_I2C_Init>

}
 80a03be:	4620      	mov	r0, r4
 80a03c0:	bd10      	pop	{r4, pc}
 80a03c2:	bf00      	nop
 80a03c4:	080a0d78 	.word	0x080a0d78

080a03c8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a03c8:	2100      	movs	r1, #0
 80a03ca:	7c00      	ldrb	r0, [r0, #16]
 80a03cc:	f7ff bef0 	b.w	80a01b0 <HAL_I2C_Is_Enabled>

080a03d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a03d0:	4770      	bx	lr

080a03d2 <_ZN9IPAddressD0Ev>:
 80a03d2:	b510      	push	{r4, lr}
 80a03d4:	4604      	mov	r4, r0
 80a03d6:	f7ff fe60 	bl	80a009a <_ZdlPv>
 80a03da:	4620      	mov	r0, r4
 80a03dc:	bd10      	pop	{r4, pc}

080a03de <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a03de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03e0:	460f      	mov	r7, r1
 80a03e2:	f100 0608 	add.w	r6, r0, #8
 80a03e6:	1d05      	adds	r5, r0, #4
 80a03e8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a03ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a03ee:	220a      	movs	r2, #10
 80a03f0:	4638      	mov	r0, r7
 80a03f2:	f000 f882 	bl	80a04fa <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a03f6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a03f8:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a03fa:	d007      	beq.n	80a040c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a03fc:	2c00      	cmp	r4, #0
 80a03fe:	d0f4      	beq.n	80a03ea <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0400:	212e      	movs	r1, #46	; 0x2e
 80a0402:	4638      	mov	r0, r7
 80a0404:	f000 f84c 	bl	80a04a0 <_ZN5Print5printEc>
 80a0408:	4404      	add	r4, r0
 80a040a:	e7ee      	b.n	80a03ea <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a040c:	4620      	mov	r0, r4
 80a040e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0410 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0410:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0412:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0416:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a041a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a041e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0422:	2304      	movs	r3, #4
 80a0424:	6041      	str	r1, [r0, #4]
 80a0426:	7503      	strb	r3, [r0, #20]
 80a0428:	bd10      	pop	{r4, pc}
	...

080a042c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a042c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a042e:	4d04      	ldr	r5, [pc, #16]	; (80a0440 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0430:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0432:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0436:	9500      	str	r5, [sp, #0]
 80a0438:	f7ff ffea 	bl	80a0410 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a043c:	b003      	add	sp, #12
 80a043e:	bd30      	pop	{r4, r5, pc}
 80a0440:	080a0da0 	.word	0x080a0da0

080a0444 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0444:	4a01      	ldr	r2, [pc, #4]	; (80a044c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0448:	601a      	str	r2, [r3, #0]
 80a044a:	4770      	bx	lr
 80a044c:	080a0e67 	.word	0x080a0e67
 80a0450:	2000030c 	.word	0x2000030c

080a0454 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0456:	4606      	mov	r6, r0
 80a0458:	460d      	mov	r5, r1
 80a045a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a045c:	2400      	movs	r4, #0
  while (size--) {
 80a045e:	42bd      	cmp	r5, r7
 80a0460:	d00c      	beq.n	80a047c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0462:	6833      	ldr	r3, [r6, #0]
 80a0464:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0468:	689b      	ldr	r3, [r3, #8]
 80a046a:	4630      	mov	r0, r6
 80a046c:	4798      	blx	r3
     if (chunk>=0)
 80a046e:	2800      	cmp	r0, #0
 80a0470:	db01      	blt.n	80a0476 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0472:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0474:	e7f3      	b.n	80a045e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0476:	2c00      	cmp	r4, #0
 80a0478:	bf08      	it	eq
 80a047a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a047c:	4620      	mov	r0, r4
 80a047e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0480 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0480:	b570      	push	{r4, r5, r6, lr}
 80a0482:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0484:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0486:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0488:	b149      	cbz	r1, 80a049e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a048a:	f000 fc5e 	bl	80a0d4a <strlen>
 80a048e:	682b      	ldr	r3, [r5, #0]
 80a0490:	4602      	mov	r2, r0
 80a0492:	4621      	mov	r1, r4
 80a0494:	4628      	mov	r0, r5
    }
 80a0496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a049a:	68db      	ldr	r3, [r3, #12]
 80a049c:	4718      	bx	r3
    }
 80a049e:	bd70      	pop	{r4, r5, r6, pc}

080a04a0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a04a0:	6803      	ldr	r3, [r0, #0]
 80a04a2:	689b      	ldr	r3, [r3, #8]
 80a04a4:	4718      	bx	r3

080a04a6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a04a6:	2a01      	cmp	r2, #1
 80a04a8:	bf98      	it	ls
 80a04aa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a04ac:	b530      	push	{r4, r5, lr}
 80a04ae:	460b      	mov	r3, r1
 80a04b0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a04b2:	2100      	movs	r1, #0
 80a04b4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a04b8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a04bc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a04c0:	fb05 3312 	mls	r3, r5, r2, r3
 80a04c4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a04c6:	2b09      	cmp	r3, #9
 80a04c8:	bf94      	ite	ls
 80a04ca:	3330      	addls	r3, #48	; 0x30
 80a04cc:	3337      	addhi	r3, #55	; 0x37
 80a04ce:	b2db      	uxtb	r3, r3
 80a04d0:	4621      	mov	r1, r4
 80a04d2:	f804 3901 	strb.w	r3, [r4], #-1
 80a04d6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a04d8:	2d00      	cmp	r5, #0
 80a04da:	d1ef      	bne.n	80a04bc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a04dc:	f7ff ffd0 	bl	80a0480 <_ZN5Print5writeEPKc>
}
 80a04e0:	b00b      	add	sp, #44	; 0x2c
 80a04e2:	bd30      	pop	{r4, r5, pc}

080a04e4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a04e4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a04e6:	b922      	cbnz	r2, 80a04f2 <_ZN5Print5printEmi+0xe>
 80a04e8:	6803      	ldr	r3, [r0, #0]
 80a04ea:	b2c9      	uxtb	r1, r1
 80a04ec:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a04ee:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a04f0:	4718      	bx	r3
  else return printNumber(n, base);
 80a04f2:	b2d2      	uxtb	r2, r2
}
 80a04f4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a04f6:	f7ff bfd6 	b.w	80a04a6 <_ZN5Print11printNumberEmh>

080a04fa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a04fa:	f7ff bff3 	b.w	80a04e4 <_ZN5Print5printEmi>

080a04fe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a04fe:	b510      	push	{r4, lr}
 80a0500:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0502:	f7ff ff1a 	bl	80a033a <_ZNSt14_Function_baseD1Ev>
 80a0506:	4620      	mov	r0, r4
 80a0508:	bd10      	pop	{r4, pc}
	...

080a050c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a050c:	4803      	ldr	r0, [pc, #12]	; (80a051c <_GLOBAL__sub_I_RGB+0x10>)
 80a050e:	2300      	movs	r3, #0
 80a0510:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0512:	4a03      	ldr	r2, [pc, #12]	; (80a0520 <_GLOBAL__sub_I_RGB+0x14>)
 80a0514:	4903      	ldr	r1, [pc, #12]	; (80a0524 <_GLOBAL__sub_I_RGB+0x18>)
 80a0516:	f000 baa9 	b.w	80a0a6c <__aeabi_atexit>
 80a051a:	bf00      	nop
 80a051c:	20000310 	.word	0x20000310
 80a0520:	20000308 	.word	0x20000308
 80a0524:	080a04ff 	.word	0x080a04ff

080a0528 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0528:	4770      	bx	lr

080a052a <_ZN8SPIClassD0Ev>:
 80a052a:	b510      	push	{r4, lr}
 80a052c:	4604      	mov	r4, r0
 80a052e:	f7ff fdb4 	bl	80a009a <_ZdlPv>
 80a0532:	4620      	mov	r0, r4
 80a0534:	bd10      	pop	{r4, pc}
	...

080a0538 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0538:	b570      	push	{r4, r5, r6, lr}
 80a053a:	4604      	mov	r4, r0
 80a053c:	460e      	mov	r6, r1
 80a053e:	4b07      	ldr	r3, [pc, #28]	; (80a055c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0540:	2500      	movs	r5, #0
 80a0542:	6003      	str	r3, [r0, #0]
 80a0544:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0548:	f7ff fdd2 	bl	80a00f0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a054c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a054e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0550:	f7ff fe40 	bl	80a01d4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0554:	60a5      	str	r5, [r4, #8]
}
 80a0556:	4620      	mov	r0, r4
 80a0558:	bd70      	pop	{r4, r5, r6, pc}
 80a055a:	bf00      	nop
 80a055c:	080a0e98 	.word	0x080a0e98

080a0560 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0560:	7900      	ldrb	r0, [r0, #4]
 80a0562:	f7ff be3f 	b.w	80a01e4 <HAL_SPI_Is_Enabled>

080a0566 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0566:	2000      	movs	r0, #0
 80a0568:	f7ff beb4 	b.w	80a02d4 <set_system_mode>

080a056c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a056c:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a056e:	681a      	ldr	r2, [r3, #0]
 80a0570:	4b02      	ldr	r3, [pc, #8]	; (80a057c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0572:	601a      	str	r2, [r3, #0]
 80a0574:	4770      	bx	lr
 80a0576:	bf00      	nop
 80a0578:	20000304 	.word	0x20000304
 80a057c:	20000320 	.word	0x20000320

080a0580 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0580:	4770      	bx	lr

080a0582 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0582:	7441      	strb	r1, [r0, #17]
 80a0584:	4770      	bx	lr

080a0586 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a0586:	7c00      	ldrb	r0, [r0, #16]
 80a0588:	f7ff be6c 	b.w	80a0264 <HAL_USART_Available_Data_For_Write>

080a058c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a058c:	7c00      	ldrb	r0, [r0, #16]
 80a058e:	f7ff be41 	b.w	80a0214 <HAL_USART_Available_Data>

080a0592 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a0592:	7c00      	ldrb	r0, [r0, #16]
 80a0594:	f7ff be4e 	b.w	80a0234 <HAL_USART_Peek_Data>

080a0598 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a0598:	7c00      	ldrb	r0, [r0, #16]
 80a059a:	f7ff be43 	b.w	80a0224 <HAL_USART_Read_Data>

080a059e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a059e:	7c00      	ldrb	r0, [r0, #16]
 80a05a0:	f7ff be50 	b.w	80a0244 <HAL_USART_Flush_Data>

080a05a4 <_ZN11USARTSerialD0Ev>:
 80a05a4:	b510      	push	{r4, lr}
 80a05a6:	4604      	mov	r4, r0
 80a05a8:	f7ff fd77 	bl	80a009a <_ZdlPv>
 80a05ac:	4620      	mov	r0, r4
 80a05ae:	bd10      	pop	{r4, pc}

080a05b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a05b0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a05b2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a05b4:	4604      	mov	r4, r0
 80a05b6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a05b8:	b925      	cbnz	r5, 80a05c4 <_ZN11USARTSerial5writeEh+0x14>
 80a05ba:	7c00      	ldrb	r0, [r0, #16]
 80a05bc:	f7ff fe52 	bl	80a0264 <HAL_USART_Available_Data_For_Write>
 80a05c0:	2800      	cmp	r0, #0
 80a05c2:	dd05      	ble.n	80a05d0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a05c4:	4631      	mov	r1, r6
 80a05c6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a05c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a05cc:	f7ff be1a 	b.w	80a0204 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a05d0:	4628      	mov	r0, r5
 80a05d2:	bd70      	pop	{r4, r5, r6, pc}

080a05d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a05d4:	b510      	push	{r4, lr}
 80a05d6:	4604      	mov	r4, r0
 80a05d8:	4608      	mov	r0, r1
 80a05da:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a05dc:	2200      	movs	r2, #0
 80a05de:	6062      	str	r2, [r4, #4]
 80a05e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a05e4:	60a2      	str	r2, [r4, #8]
 80a05e6:	4a05      	ldr	r2, [pc, #20]	; (80a05fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a05e8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a05ea:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a05ec:	2201      	movs	r2, #1
 80a05ee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a05f0:	461a      	mov	r2, r3
 80a05f2:	f7ff fdff 	bl	80a01f4 <HAL_USART_Init>
}
 80a05f6:	4620      	mov	r0, r4
 80a05f8:	bd10      	pop	{r4, pc}
 80a05fa:	bf00      	nop
 80a05fc:	080a0ed4 	.word	0x080a0ed4

080a0600 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0600:	7c00      	ldrb	r0, [r0, #16]
 80a0602:	f7ff be27 	b.w	80a0254 <HAL_USART_Is_Enabled>
	...

080a0608 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0608:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a060a:	4d0c      	ldr	r5, [pc, #48]	; (80a063c <_Z22__fetch_global_Serial1v+0x34>)
 80a060c:	6829      	ldr	r1, [r5, #0]
 80a060e:	f011 0401 	ands.w	r4, r1, #1
 80a0612:	d111      	bne.n	80a0638 <_Z22__fetch_global_Serial1v+0x30>
 80a0614:	4628      	mov	r0, r5
 80a0616:	f7ff fd42 	bl	80a009e <__cxa_guard_acquire>
 80a061a:	b168      	cbz	r0, 80a0638 <_Z22__fetch_global_Serial1v+0x30>
 80a061c:	4a08      	ldr	r2, [pc, #32]	; (80a0640 <_Z22__fetch_global_Serial1v+0x38>)
 80a061e:	4621      	mov	r1, r4
 80a0620:	4b08      	ldr	r3, [pc, #32]	; (80a0644 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0622:	4809      	ldr	r0, [pc, #36]	; (80a0648 <_Z22__fetch_global_Serial1v+0x40>)
 80a0624:	f7ff ffd6 	bl	80a05d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0628:	4628      	mov	r0, r5
 80a062a:	f7ff fd3d 	bl	80a00a8 <__cxa_guard_release>
 80a062e:	4a07      	ldr	r2, [pc, #28]	; (80a064c <_Z22__fetch_global_Serial1v+0x44>)
 80a0630:	4907      	ldr	r1, [pc, #28]	; (80a0650 <_Z22__fetch_global_Serial1v+0x48>)
 80a0632:	4805      	ldr	r0, [pc, #20]	; (80a0648 <_Z22__fetch_global_Serial1v+0x40>)
 80a0634:	f000 fa1a 	bl	80a0a6c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0638:	4803      	ldr	r0, [pc, #12]	; (80a0648 <_Z22__fetch_global_Serial1v+0x40>)
 80a063a:	bd38      	pop	{r3, r4, r5, pc}
 80a063c:	200003bc 	.word	0x200003bc
 80a0640:	200003c0 	.word	0x200003c0
 80a0644:	20000338 	.word	0x20000338
 80a0648:	20000324 	.word	0x20000324
 80a064c:	20000308 	.word	0x20000308
 80a0650:	080a0581 	.word	0x080a0581

080a0654 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0654:	7441      	strb	r1, [r0, #17]
 80a0656:	4770      	bx	lr

080a0658 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a0658:	4770      	bx	lr

080a065a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a065a:	2100      	movs	r1, #0
 80a065c:	7c00      	ldrb	r0, [r0, #16]
 80a065e:	f7ff be21 	b.w	80a02a4 <HAL_USB_USART_Receive_Data>

080a0662 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0662:	2101      	movs	r1, #1
 80a0664:	7c00      	ldrb	r0, [r0, #16]
 80a0666:	f7ff be1d 	b.w	80a02a4 <HAL_USB_USART_Receive_Data>

080a066a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a066a:	7c00      	ldrb	r0, [r0, #16]
 80a066c:	f7ff be12 	b.w	80a0294 <HAL_USB_USART_Available_Data_For_Write>

080a0670 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0670:	7c00      	ldrb	r0, [r0, #16]
 80a0672:	f7ff be07 	b.w	80a0284 <HAL_USB_USART_Available_Data>

080a0676 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0676:	b538      	push	{r3, r4, r5, lr}
 80a0678:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a067a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a067c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a067e:	f7ff fe09 	bl	80a0294 <HAL_USB_USART_Available_Data_For_Write>
 80a0682:	2800      	cmp	r0, #0
 80a0684:	dc01      	bgt.n	80a068a <_ZN9USBSerial5writeEh+0x14>
 80a0686:	7c60      	ldrb	r0, [r4, #17]
 80a0688:	b120      	cbz	r0, 80a0694 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a068a:	4629      	mov	r1, r5
 80a068c:	7c20      	ldrb	r0, [r4, #16]
 80a068e:	f7ff fe11 	bl	80a02b4 <HAL_USB_USART_Send_Data>
    return 1;
 80a0692:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0694:	bd38      	pop	{r3, r4, r5, pc}

080a0696 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0696:	7c00      	ldrb	r0, [r0, #16]
 80a0698:	f7ff be14 	b.w	80a02c4 <HAL_USB_USART_Flush_Data>

080a069c <_ZN9USBSerialD0Ev>:
 80a069c:	b510      	push	{r4, lr}
 80a069e:	4604      	mov	r4, r0
 80a06a0:	f7ff fcfb 	bl	80a009a <_ZdlPv>
 80a06a4:	4620      	mov	r0, r4
 80a06a6:	bd10      	pop	{r4, pc}

080a06a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a06a8:	b510      	push	{r4, lr}
 80a06aa:	4604      	mov	r4, r0
 80a06ac:	2300      	movs	r3, #0
 80a06ae:	6063      	str	r3, [r4, #4]
 80a06b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a06b4:	60a3      	str	r3, [r4, #8]
 80a06b6:	4b05      	ldr	r3, [pc, #20]	; (80a06cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a06b8:	4608      	mov	r0, r1
 80a06ba:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a06bc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a06be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a06c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a06c2:	4611      	mov	r1, r2
 80a06c4:	f7ff fdd6 	bl	80a0274 <HAL_USB_USART_Init>
}
 80a06c8:	4620      	mov	r0, r4
 80a06ca:	bd10      	pop	{r4, pc}
 80a06cc:	080a0f04 	.word	0x080a0f04

080a06d0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a06d0:	b510      	push	{r4, lr}
 80a06d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a06d4:	2214      	movs	r2, #20
 80a06d6:	2100      	movs	r1, #0
 80a06d8:	f000 fb2f 	bl	80a0d3a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a06dc:	4b05      	ldr	r3, [pc, #20]	; (80a06f4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a06de:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a06e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a06e2:	4b05      	ldr	r3, [pc, #20]	; (80a06f8 <_Z19acquireSerialBufferv+0x28>)
 80a06e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a06e6:	f240 1301 	movw	r3, #257	; 0x101
 80a06ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a06ec:	2381      	movs	r3, #129	; 0x81
 80a06ee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a06f0:	bd10      	pop	{r4, pc}
 80a06f2:	bf00      	nop
 80a06f4:	200004c9 	.word	0x200004c9
 80a06f8:	20000448 	.word	0x20000448

080a06fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a06fc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a06fe:	4d0e      	ldr	r5, [pc, #56]	; (80a0738 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0700:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0702:	a801      	add	r0, sp, #4
 80a0704:	f7ff ffe4 	bl	80a06d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0708:	6829      	ldr	r1, [r5, #0]
 80a070a:	f011 0401 	ands.w	r4, r1, #1
 80a070e:	d110      	bne.n	80a0732 <_Z16_fetch_usbserialv+0x36>
 80a0710:	4628      	mov	r0, r5
 80a0712:	f7ff fcc4 	bl	80a009e <__cxa_guard_acquire>
 80a0716:	b160      	cbz	r0, 80a0732 <_Z16_fetch_usbserialv+0x36>
 80a0718:	aa01      	add	r2, sp, #4
 80a071a:	4621      	mov	r1, r4
 80a071c:	4807      	ldr	r0, [pc, #28]	; (80a073c <_Z16_fetch_usbserialv+0x40>)
 80a071e:	f7ff ffc3 	bl	80a06a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0722:	4628      	mov	r0, r5
 80a0724:	f7ff fcc0 	bl	80a00a8 <__cxa_guard_release>
 80a0728:	4a05      	ldr	r2, [pc, #20]	; (80a0740 <_Z16_fetch_usbserialv+0x44>)
 80a072a:	4906      	ldr	r1, [pc, #24]	; (80a0744 <_Z16_fetch_usbserialv+0x48>)
 80a072c:	4803      	ldr	r0, [pc, #12]	; (80a073c <_Z16_fetch_usbserialv+0x40>)
 80a072e:	f000 f99d 	bl	80a0a6c <__aeabi_atexit>
	return _usbserial;
}
 80a0732:	4802      	ldr	r0, [pc, #8]	; (80a073c <_Z16_fetch_usbserialv+0x40>)
 80a0734:	b007      	add	sp, #28
 80a0736:	bd30      	pop	{r4, r5, pc}
 80a0738:	20000444 	.word	0x20000444
 80a073c:	200005cc 	.word	0x200005cc
 80a0740:	20000308 	.word	0x20000308
 80a0744:	080a0659 	.word	0x080a0659

080a0748 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0748:	b510      	push	{r4, lr}
 80a074a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a074c:	2214      	movs	r2, #20
 80a074e:	2100      	movs	r1, #0
 80a0750:	f000 faf3 	bl	80a0d3a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0754:	4b05      	ldr	r3, [pc, #20]	; (80a076c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0756:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0758:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a075a:	4b05      	ldr	r3, [pc, #20]	; (80a0770 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a075c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a075e:	f240 1301 	movw	r3, #257	; 0x101
 80a0762:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0764:	2381      	movs	r3, #129	; 0x81
 80a0766:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0768:	bd10      	pop	{r4, pc}
 80a076a:	bf00      	nop
 80a076c:	2000067c 	.word	0x2000067c
 80a0770:	200005e4 	.word	0x200005e4

080a0774 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0774:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0776:	4c0e      	ldr	r4, [pc, #56]	; (80a07b0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0778:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a077a:	a801      	add	r0, sp, #4
 80a077c:	f7ff ffe4 	bl	80a0748 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0780:	6823      	ldr	r3, [r4, #0]
 80a0782:	07db      	lsls	r3, r3, #31
 80a0784:	d410      	bmi.n	80a07a8 <_Z17_fetch_usbserial1v+0x34>
 80a0786:	4620      	mov	r0, r4
 80a0788:	f7ff fc89 	bl	80a009e <__cxa_guard_acquire>
 80a078c:	b160      	cbz	r0, 80a07a8 <_Z17_fetch_usbserial1v+0x34>
 80a078e:	aa01      	add	r2, sp, #4
 80a0790:	2101      	movs	r1, #1
 80a0792:	4808      	ldr	r0, [pc, #32]	; (80a07b4 <_Z17_fetch_usbserial1v+0x40>)
 80a0794:	f7ff ff88 	bl	80a06a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0798:	4620      	mov	r0, r4
 80a079a:	f7ff fc85 	bl	80a00a8 <__cxa_guard_release>
 80a079e:	4a06      	ldr	r2, [pc, #24]	; (80a07b8 <_Z17_fetch_usbserial1v+0x44>)
 80a07a0:	4906      	ldr	r1, [pc, #24]	; (80a07bc <_Z17_fetch_usbserial1v+0x48>)
 80a07a2:	4804      	ldr	r0, [pc, #16]	; (80a07b4 <_Z17_fetch_usbserial1v+0x40>)
 80a07a4:	f000 f962 	bl	80a0a6c <__aeabi_atexit>
  return _usbserial1;
}
 80a07a8:	4802      	ldr	r0, [pc, #8]	; (80a07b4 <_Z17_fetch_usbserial1v+0x40>)
 80a07aa:	b006      	add	sp, #24
 80a07ac:	bd10      	pop	{r4, pc}
 80a07ae:	bf00      	nop
 80a07b0:	200005e0 	.word	0x200005e0
 80a07b4:	20000668 	.word	0x20000668
 80a07b8:	20000308 	.word	0x20000308
 80a07bc:	080a0659 	.word	0x080a0659

080a07c0 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a07c0:	4770      	bx	lr

080a07c2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a07c2:	2200      	movs	r2, #0
 80a07c4:	4611      	mov	r1, r2
 80a07c6:	4610      	mov	r0, r2
 80a07c8:	f7ff bda4 	b.w	80a0314 <network_ready>

080a07cc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a07cc:	4803      	ldr	r0, [pc, #12]	; (80a07dc <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80a07ce:	4b04      	ldr	r3, [pc, #16]	; (80a07e0 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a07d0:	4a04      	ldr	r2, [pc, #16]	; (80a07e4 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80a07d2:	4905      	ldr	r1, [pc, #20]	; (80a07e8 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80a07d4:	6003      	str	r3, [r0, #0]
 80a07d6:	f000 b949 	b.w	80a0a6c <__aeabi_atexit>
 80a07da:	bf00      	nop
 80a07dc:	20000780 	.word	0x20000780
 80a07e0:	080a0f34 	.word	0x080a0f34
 80a07e4:	20000308 	.word	0x20000308
 80a07e8:	080a07c1 	.word	0x080a07c1

080a07ec <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a07ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a07ee:	4b14      	ldr	r3, [pc, #80]	; (80a0840 <serialEventRun+0x54>)
 80a07f0:	b133      	cbz	r3, 80a0800 <serialEventRun+0x14>
 80a07f2:	f7ff ff83 	bl	80a06fc <_Z16_fetch_usbserialv>
 80a07f6:	6803      	ldr	r3, [r0, #0]
 80a07f8:	691b      	ldr	r3, [r3, #16]
 80a07fa:	4798      	blx	r3
 80a07fc:	2800      	cmp	r0, #0
 80a07fe:	dc16      	bgt.n	80a082e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0800:	4b10      	ldr	r3, [pc, #64]	; (80a0844 <serialEventRun+0x58>)
 80a0802:	b133      	cbz	r3, 80a0812 <serialEventRun+0x26>
 80a0804:	f7ff ff00 	bl	80a0608 <_Z22__fetch_global_Serial1v>
 80a0808:	6803      	ldr	r3, [r0, #0]
 80a080a:	691b      	ldr	r3, [r3, #16]
 80a080c:	4798      	blx	r3
 80a080e:	2800      	cmp	r0, #0
 80a0810:	dc10      	bgt.n	80a0834 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0812:	4b0d      	ldr	r3, [pc, #52]	; (80a0848 <serialEventRun+0x5c>)
 80a0814:	b10b      	cbz	r3, 80a081a <serialEventRun+0x2e>
 80a0816:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a081a:	4b0c      	ldr	r3, [pc, #48]	; (80a084c <serialEventRun+0x60>)
 80a081c:	b17b      	cbz	r3, 80a083e <serialEventRun+0x52>
 80a081e:	f7ff ffa9 	bl	80a0774 <_Z17_fetch_usbserial1v>
 80a0822:	6803      	ldr	r3, [r0, #0]
 80a0824:	691b      	ldr	r3, [r3, #16]
 80a0826:	4798      	blx	r3
 80a0828:	2800      	cmp	r0, #0
 80a082a:	dc06      	bgt.n	80a083a <serialEventRun+0x4e>
 80a082c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a082e:	f3af 8000 	nop.w
 80a0832:	e7e5      	b.n	80a0800 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0834:	f3af 8000 	nop.w
 80a0838:	e7eb      	b.n	80a0812 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a083a:	f3af 8000 	nop.w
 80a083e:	bd08      	pop	{r3, pc}
	...

080a0850 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0850:	b508      	push	{r3, lr}
	serialEventRun();
 80a0852:	f7ff ffcb 	bl	80a07ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0856:	f7ff fc5b 	bl	80a0110 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a085a:	4b01      	ldr	r3, [pc, #4]	; (80a0860 <_post_loop+0x10>)
 80a085c:	6018      	str	r0, [r3, #0]
 80a085e:	bd08      	pop	{r3, pc}
 80a0860:	2000078c 	.word	0x2000078c

080a0864 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0864:	4802      	ldr	r0, [pc, #8]	; (80a0870 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0866:	4a03      	ldr	r2, [pc, #12]	; (80a0874 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0868:	4903      	ldr	r1, [pc, #12]	; (80a0878 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a086a:	1a12      	subs	r2, r2, r0
 80a086c:	f000 ba5a 	b.w	80a0d24 <memcpy>
 80a0870:	40024000 	.word	0x40024000
 80a0874:	40024004 	.word	0x40024004
 80a0878:	080a0f70 	.word	0x080a0f70

080a087c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80a087c:	2000      	movs	r0, #0
 80a087e:	4770      	bx	lr

080a0880 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a0880:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80a0882:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80a0884:	4604      	mov	r4, r0
    switch (req->type) {
 80a0886:	2b0a      	cmp	r3, #10
 80a0888:	d00e      	beq.n	80a08a8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80a088a:	2b50      	cmp	r3, #80	; 0x50
 80a088c:	d11c      	bne.n	80a08c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80a088e:	4b10      	ldr	r3, [pc, #64]	; (80a08d0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80a0890:	681d      	ldr	r5, [r3, #0]
 80a0892:	b1cd      	cbz	r5, 80a08c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80a0894:	7d03      	ldrb	r3, [r0, #20]
 80a0896:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a089a:	9300      	str	r3, [sp, #0]
 80a089c:	68c2      	ldr	r2, [r0, #12]
 80a089e:	f100 0310 	add.w	r3, r0, #16
 80a08a2:	6880      	ldr	r0, [r0, #8]
 80a08a4:	47a8      	blx	r5
 80a08a6:	e007      	b.n	80a08b8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80a08a8:	f100 0310 	add.w	r3, r0, #16
 80a08ac:	68c2      	ldr	r2, [r0, #12]
 80a08ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a08b2:	6880      	ldr	r0, [r0, #8]
 80a08b4:	f7ff ffe2 	bl	80a087c <_Z26usb_request_custom_handlerPcjjPj>
 80a08b8:	b130      	cbz	r0, 80a08c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80a08ba:	2200      	movs	r2, #0
 80a08bc:	4620      	mov	r0, r4
 80a08be:	4611      	mov	r1, r2
 80a08c0:	f7ff fd20 	bl	80a0304 <system_set_usb_request_result>
        return true;
 80a08c4:	2001      	movs	r0, #1
 80a08c6:	e000      	b.n	80a08ca <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80a08c8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80a08ca:	b003      	add	sp, #12
 80a08cc:	bd30      	pop	{r4, r5, pc}
 80a08ce:	bf00      	nop
 80a08d0:	20000784 	.word	0x20000784

080a08d4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80a08d4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a08d6:	4c0c      	ldr	r4, [pc, #48]	; (80a0908 <module_user_init_hook+0x34>)
 80a08d8:	4d0c      	ldr	r5, [pc, #48]	; (80a090c <module_user_init_hook+0x38>)
 80a08da:	6823      	ldr	r3, [r4, #0]
 80a08dc:	42ab      	cmp	r3, r5
 80a08de:	4b0c      	ldr	r3, [pc, #48]	; (80a0910 <module_user_init_hook+0x3c>)
 80a08e0:	bf0c      	ite	eq
 80a08e2:	2201      	moveq	r2, #1
 80a08e4:	2200      	movne	r2, #0
 80a08e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a08e8:	d002      	beq.n	80a08f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a08ea:	f7ff ffbb 	bl	80a0864 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a08ee:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80a08f0:	4b08      	ldr	r3, [pc, #32]	; (80a0914 <module_user_init_hook+0x40>)
 80a08f2:	b11b      	cbz	r3, 80a08fc <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80a08f4:	f7ff fc04 	bl	80a0100 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80a08f8:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80a08fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80a0900:	2100      	movs	r1, #0
 80a0902:	4805      	ldr	r0, [pc, #20]	; (80a0918 <module_user_init_hook+0x44>)
 80a0904:	f7ff bcf6 	b.w	80a02f4 <system_set_usb_request_app_handler>
 80a0908:	40024000 	.word	0x40024000
 80a090c:	9a271c1e 	.word	0x9a271c1e
 80a0910:	20000788 	.word	0x20000788
 80a0914:	00000000 	.word	0x00000000
 80a0918:	080a0881 	.word	0x080a0881

080a091c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a091c:	b510      	push	{r4, lr}
 80a091e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0920:	480f      	ldr	r0, [pc, #60]	; (80a0960 <pinAvailable+0x44>)
 80a0922:	f7ff fe1d 	bl	80a0560 <_ZN8SPIClass9isEnabledEv>
 80a0926:	b128      	cbz	r0, 80a0934 <pinAvailable+0x18>
 80a0928:	f1a4 030d 	sub.w	r3, r4, #13
 80a092c:	2b02      	cmp	r3, #2
 80a092e:	d801      	bhi.n	80a0934 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0930:	2000      	movs	r0, #0
 80a0932:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0934:	f000 f840 	bl	80a09b8 <_Z19__fetch_global_Wirev>
 80a0938:	f7ff fd46 	bl	80a03c8 <_ZN7TwoWire9isEnabledEv>
 80a093c:	b108      	cbz	r0, 80a0942 <pinAvailable+0x26>
 80a093e:	2c01      	cmp	r4, #1
 80a0940:	d9f6      	bls.n	80a0930 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0942:	f7ff fe61 	bl	80a0608 <_Z22__fetch_global_Serial1v>
 80a0946:	f7ff fe5b 	bl	80a0600 <_ZN11USARTSerial9isEnabledEv>
 80a094a:	b118      	cbz	r0, 80a0954 <pinAvailable+0x38>
 80a094c:	f1a4 0312 	sub.w	r3, r4, #18
 80a0950:	2b01      	cmp	r3, #1
 80a0952:	d9ed      	bls.n	80a0930 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0954:	2c17      	cmp	r4, #23
 80a0956:	bf8c      	ite	hi
 80a0958:	2000      	movhi	r0, #0
 80a095a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a095c:	bd10      	pop	{r4, pc}
 80a095e:	bf00      	nop
 80a0960:	200007c0 	.word	0x200007c0

080a0964 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0964:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0966:	b538      	push	{r3, r4, r5, lr}
 80a0968:	4604      	mov	r4, r0
 80a096a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a096c:	d80a      	bhi.n	80a0984 <pinMode+0x20>
 80a096e:	29ff      	cmp	r1, #255	; 0xff
 80a0970:	d008      	beq.n	80a0984 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0972:	f7ff ffd3 	bl	80a091c <pinAvailable>
 80a0976:	b128      	cbz	r0, 80a0984 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0978:	4629      	mov	r1, r5
 80a097a:	4620      	mov	r0, r4
}
 80a097c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0980:	f7ff bbd6 	b.w	80a0130 <HAL_Pin_Mode>
 80a0984:	bd38      	pop	{r3, r4, r5, pc}

080a0986 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0986:	b538      	push	{r3, r4, r5, lr}
 80a0988:	4604      	mov	r4, r0
 80a098a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a098c:	f7ff fbd8 	bl	80a0140 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0990:	28ff      	cmp	r0, #255	; 0xff
 80a0992:	d010      	beq.n	80a09b6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0994:	2806      	cmp	r0, #6
 80a0996:	d804      	bhi.n	80a09a2 <digitalWrite+0x1c>
 80a0998:	234d      	movs	r3, #77	; 0x4d
 80a099a:	fa23 f000 	lsr.w	r0, r3, r0
 80a099e:	07c3      	lsls	r3, r0, #31
 80a09a0:	d409      	bmi.n	80a09b6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a09a2:	4620      	mov	r0, r4
 80a09a4:	f7ff ffba 	bl	80a091c <pinAvailable>
 80a09a8:	b128      	cbz	r0, 80a09b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a09aa:	4629      	mov	r1, r5
 80a09ac:	4620      	mov	r0, r4
}
 80a09ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a09b2:	f7ff bbcd 	b.w	80a0150 <HAL_GPIO_Write>
 80a09b6:	bd38      	pop	{r3, r4, r5, pc}

080a09b8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a09b8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a09ba:	4d0b      	ldr	r5, [pc, #44]	; (80a09e8 <_Z19__fetch_global_Wirev+0x30>)
 80a09bc:	6829      	ldr	r1, [r5, #0]
 80a09be:	f011 0401 	ands.w	r4, r1, #1
 80a09c2:	d10f      	bne.n	80a09e4 <_Z19__fetch_global_Wirev+0x2c>
 80a09c4:	4628      	mov	r0, r5
 80a09c6:	f7ff fb6a 	bl	80a009e <__cxa_guard_acquire>
 80a09ca:	b158      	cbz	r0, 80a09e4 <_Z19__fetch_global_Wirev+0x2c>
 80a09cc:	4621      	mov	r1, r4
 80a09ce:	4807      	ldr	r0, [pc, #28]	; (80a09ec <_Z19__fetch_global_Wirev+0x34>)
 80a09d0:	f7ff fce8 	bl	80a03a4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a09d4:	4628      	mov	r0, r5
 80a09d6:	f7ff fb67 	bl	80a00a8 <__cxa_guard_release>
 80a09da:	4a05      	ldr	r2, [pc, #20]	; (80a09f0 <_Z19__fetch_global_Wirev+0x38>)
 80a09dc:	4905      	ldr	r1, [pc, #20]	; (80a09f4 <_Z19__fetch_global_Wirev+0x3c>)
 80a09de:	4803      	ldr	r0, [pc, #12]	; (80a09ec <_Z19__fetch_global_Wirev+0x34>)
 80a09e0:	f000 f844 	bl	80a0a6c <__aeabi_atexit>
	return wire;
}
 80a09e4:	4801      	ldr	r0, [pc, #4]	; (80a09ec <_Z19__fetch_global_Wirev+0x34>)
 80a09e6:	bd38      	pop	{r3, r4, r5, pc}
 80a09e8:	20000790 	.word	0x20000790
 80a09ec:	20000794 	.word	0x20000794
 80a09f0:	20000308 	.word	0x20000308
 80a09f4:	080a034d 	.word	0x080a034d

080a09f8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a09f8:	b513      	push	{r0, r1, r4, lr}
 80a09fa:	4c08      	ldr	r4, [pc, #32]	; (80a0a1c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a09fc:	2300      	movs	r3, #0
 80a09fe:	461a      	mov	r2, r3
 80a0a00:	4619      	mov	r1, r3
 80a0a02:	9300      	str	r3, [sp, #0]
 80a0a04:	4620      	mov	r0, r4
 80a0a06:	f7ff fd11 	bl	80a042c <_ZN9IPAddressC1Ehhhh>
 80a0a0a:	4620      	mov	r0, r4
 80a0a0c:	4a04      	ldr	r2, [pc, #16]	; (80a0a20 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0a0e:	4905      	ldr	r1, [pc, #20]	; (80a0a24 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0a10:	b002      	add	sp, #8
 80a0a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0a16:	f000 b829 	b.w	80a0a6c <__aeabi_atexit>
 80a0a1a:	bf00      	nop
 80a0a1c:	200007a8 	.word	0x200007a8
 80a0a20:	20000308 	.word	0x20000308
 80a0a24:	080a03d1 	.word	0x080a03d1

080a0a28 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0a28:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0a2a:	4c0c      	ldr	r4, [pc, #48]	; (80a0a5c <_GLOBAL__sub_I_SPI+0x34>)
 80a0a2c:	4e0c      	ldr	r6, [pc, #48]	; (80a0a60 <_GLOBAL__sub_I_SPI+0x38>)
 80a0a2e:	4d0d      	ldr	r5, [pc, #52]	; (80a0a64 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0a30:	2100      	movs	r1, #0
 80a0a32:	4620      	mov	r0, r4
 80a0a34:	f7ff fd80 	bl	80a0538 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0a38:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0a3a:	4c0b      	ldr	r4, [pc, #44]	; (80a0a68 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0a3c:	4632      	mov	r2, r6
 80a0a3e:	4629      	mov	r1, r5
 80a0a40:	f000 f814 	bl	80a0a6c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0a44:	2101      	movs	r1, #1
 80a0a46:	4620      	mov	r0, r4
 80a0a48:	f7ff fd76 	bl	80a0538 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0a4c:	4632      	mov	r2, r6
 80a0a4e:	4629      	mov	r1, r5
 80a0a50:	4620      	mov	r0, r4
 80a0a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0a56:	f000 b809 	b.w	80a0a6c <__aeabi_atexit>
 80a0a5a:	bf00      	nop
 80a0a5c:	200007c0 	.word	0x200007c0
 80a0a60:	20000308 	.word	0x20000308
 80a0a64:	080a0529 	.word	0x080a0529
 80a0a68:	200007d0 	.word	0x200007d0

080a0a6c <__aeabi_atexit>:
 80a0a6c:	460b      	mov	r3, r1
 80a0a6e:	4601      	mov	r1, r0
 80a0a70:	4618      	mov	r0, r3
 80a0a72:	f000 b949 	b.w	80a0d08 <__cxa_atexit>
	...

080a0a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0a78:	4b24      	ldr	r3, [pc, #144]	; (80a0b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0a7a:	681a      	ldr	r2, [r3, #0]
 80a0a7c:	07d0      	lsls	r0, r2, #31
 80a0a7e:	bf5c      	itt	pl
 80a0a80:	2201      	movpl	r2, #1
 80a0a82:	601a      	strpl	r2, [r3, #0]
 80a0a84:	4b22      	ldr	r3, [pc, #136]	; (80a0b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0a86:	681a      	ldr	r2, [r3, #0]
 80a0a88:	07d1      	lsls	r1, r2, #31
 80a0a8a:	bf5c      	itt	pl
 80a0a8c:	2201      	movpl	r2, #1
 80a0a8e:	601a      	strpl	r2, [r3, #0]
 80a0a90:	4b20      	ldr	r3, [pc, #128]	; (80a0b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0a92:	681a      	ldr	r2, [r3, #0]
 80a0a94:	07d2      	lsls	r2, r2, #31
 80a0a96:	bf5c      	itt	pl
 80a0a98:	2201      	movpl	r2, #1
 80a0a9a:	601a      	strpl	r2, [r3, #0]
 80a0a9c:	4b1e      	ldr	r3, [pc, #120]	; (80a0b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0a9e:	681a      	ldr	r2, [r3, #0]
 80a0aa0:	07d0      	lsls	r0, r2, #31
 80a0aa2:	bf5c      	itt	pl
 80a0aa4:	2201      	movpl	r2, #1
 80a0aa6:	601a      	strpl	r2, [r3, #0]
 80a0aa8:	4b1c      	ldr	r3, [pc, #112]	; (80a0b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0aaa:	681a      	ldr	r2, [r3, #0]
 80a0aac:	07d1      	lsls	r1, r2, #31
 80a0aae:	bf5c      	itt	pl
 80a0ab0:	2201      	movpl	r2, #1
 80a0ab2:	601a      	strpl	r2, [r3, #0]
 80a0ab4:	4b1a      	ldr	r3, [pc, #104]	; (80a0b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0ab6:	681a      	ldr	r2, [r3, #0]
 80a0ab8:	07d2      	lsls	r2, r2, #31
 80a0aba:	bf5c      	itt	pl
 80a0abc:	2201      	movpl	r2, #1
 80a0abe:	601a      	strpl	r2, [r3, #0]
 80a0ac0:	4b18      	ldr	r3, [pc, #96]	; (80a0b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0ac2:	681a      	ldr	r2, [r3, #0]
 80a0ac4:	07d0      	lsls	r0, r2, #31
 80a0ac6:	bf5c      	itt	pl
 80a0ac8:	2201      	movpl	r2, #1
 80a0aca:	601a      	strpl	r2, [r3, #0]
 80a0acc:	4b16      	ldr	r3, [pc, #88]	; (80a0b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0ace:	681a      	ldr	r2, [r3, #0]
 80a0ad0:	07d1      	lsls	r1, r2, #31
 80a0ad2:	bf5c      	itt	pl
 80a0ad4:	2201      	movpl	r2, #1
 80a0ad6:	601a      	strpl	r2, [r3, #0]
 80a0ad8:	4b14      	ldr	r3, [pc, #80]	; (80a0b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0ada:	681a      	ldr	r2, [r3, #0]
 80a0adc:	07d2      	lsls	r2, r2, #31
 80a0ade:	bf5c      	itt	pl
 80a0ae0:	2201      	movpl	r2, #1
 80a0ae2:	601a      	strpl	r2, [r3, #0]
 80a0ae4:	4b12      	ldr	r3, [pc, #72]	; (80a0b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0ae6:	681a      	ldr	r2, [r3, #0]
 80a0ae8:	07d0      	lsls	r0, r2, #31
 80a0aea:	bf5c      	itt	pl
 80a0aec:	2201      	movpl	r2, #1
 80a0aee:	601a      	strpl	r2, [r3, #0]
 80a0af0:	4b10      	ldr	r3, [pc, #64]	; (80a0b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0af2:	681a      	ldr	r2, [r3, #0]
 80a0af4:	07d1      	lsls	r1, r2, #31
 80a0af6:	bf5c      	itt	pl
 80a0af8:	2201      	movpl	r2, #1
 80a0afa:	601a      	strpl	r2, [r3, #0]
 80a0afc:	4b0e      	ldr	r3, [pc, #56]	; (80a0b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0afe:	681a      	ldr	r2, [r3, #0]
 80a0b00:	07d2      	lsls	r2, r2, #31
 80a0b02:	bf5c      	itt	pl
 80a0b04:	2201      	movpl	r2, #1
 80a0b06:	601a      	strpl	r2, [r3, #0]
 80a0b08:	4770      	bx	lr
 80a0b0a:	bf00      	nop
 80a0b0c:	2000080c 	.word	0x2000080c
 80a0b10:	20000808 	.word	0x20000808
 80a0b14:	20000804 	.word	0x20000804
 80a0b18:	20000800 	.word	0x20000800
 80a0b1c:	200007fc 	.word	0x200007fc
 80a0b20:	200007f8 	.word	0x200007f8
 80a0b24:	200007f4 	.word	0x200007f4
 80a0b28:	200007f0 	.word	0x200007f0
 80a0b2c:	200007ec 	.word	0x200007ec
 80a0b30:	200007e8 	.word	0x200007e8
 80a0b34:	200007e4 	.word	0x200007e4
 80a0b38:	200007e0 	.word	0x200007e0

080a0b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0b3c:	4b18      	ldr	r3, [pc, #96]	; (80a0ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0b3e:	681a      	ldr	r2, [r3, #0]
 80a0b40:	07d1      	lsls	r1, r2, #31
 80a0b42:	bf5c      	itt	pl
 80a0b44:	2201      	movpl	r2, #1
 80a0b46:	601a      	strpl	r2, [r3, #0]
 80a0b48:	4b16      	ldr	r3, [pc, #88]	; (80a0ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0b4a:	681a      	ldr	r2, [r3, #0]
 80a0b4c:	07d2      	lsls	r2, r2, #31
 80a0b4e:	bf5c      	itt	pl
 80a0b50:	2201      	movpl	r2, #1
 80a0b52:	601a      	strpl	r2, [r3, #0]
 80a0b54:	4b14      	ldr	r3, [pc, #80]	; (80a0ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0b56:	681a      	ldr	r2, [r3, #0]
 80a0b58:	07d0      	lsls	r0, r2, #31
 80a0b5a:	bf5c      	itt	pl
 80a0b5c:	2201      	movpl	r2, #1
 80a0b5e:	601a      	strpl	r2, [r3, #0]
 80a0b60:	4b12      	ldr	r3, [pc, #72]	; (80a0bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0b62:	681a      	ldr	r2, [r3, #0]
 80a0b64:	07d1      	lsls	r1, r2, #31
 80a0b66:	bf5c      	itt	pl
 80a0b68:	2201      	movpl	r2, #1
 80a0b6a:	601a      	strpl	r2, [r3, #0]
 80a0b6c:	4b10      	ldr	r3, [pc, #64]	; (80a0bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0b6e:	681a      	ldr	r2, [r3, #0]
 80a0b70:	07d2      	lsls	r2, r2, #31
 80a0b72:	bf5c      	itt	pl
 80a0b74:	2201      	movpl	r2, #1
 80a0b76:	601a      	strpl	r2, [r3, #0]
 80a0b78:	4b0e      	ldr	r3, [pc, #56]	; (80a0bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0b7a:	681a      	ldr	r2, [r3, #0]
 80a0b7c:	07d0      	lsls	r0, r2, #31
 80a0b7e:	bf5c      	itt	pl
 80a0b80:	2201      	movpl	r2, #1
 80a0b82:	601a      	strpl	r2, [r3, #0]
 80a0b84:	4b0c      	ldr	r3, [pc, #48]	; (80a0bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0b86:	681a      	ldr	r2, [r3, #0]
 80a0b88:	07d1      	lsls	r1, r2, #31
 80a0b8a:	bf5c      	itt	pl
 80a0b8c:	2201      	movpl	r2, #1
 80a0b8e:	601a      	strpl	r2, [r3, #0]
 80a0b90:	4b0a      	ldr	r3, [pc, #40]	; (80a0bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0b92:	681a      	ldr	r2, [r3, #0]
 80a0b94:	07d2      	lsls	r2, r2, #31
 80a0b96:	bf5c      	itt	pl
 80a0b98:	2201      	movpl	r2, #1
 80a0b9a:	601a      	strpl	r2, [r3, #0]
 80a0b9c:	4770      	bx	lr
 80a0b9e:	bf00      	nop
 80a0ba0:	2000082c 	.word	0x2000082c
 80a0ba4:	20000828 	.word	0x20000828
 80a0ba8:	20000824 	.word	0x20000824
 80a0bac:	20000820 	.word	0x20000820
 80a0bb0:	2000081c 	.word	0x2000081c
 80a0bb4:	20000818 	.word	0x20000818
 80a0bb8:	20000814 	.word	0x20000814
 80a0bbc:	20000810 	.word	0x20000810

080a0bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0bc0:	4b18      	ldr	r3, [pc, #96]	; (80a0c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0bc2:	681a      	ldr	r2, [r3, #0]
 80a0bc4:	07d1      	lsls	r1, r2, #31
 80a0bc6:	bf5c      	itt	pl
 80a0bc8:	2201      	movpl	r2, #1
 80a0bca:	601a      	strpl	r2, [r3, #0]
 80a0bcc:	4b16      	ldr	r3, [pc, #88]	; (80a0c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0bce:	681a      	ldr	r2, [r3, #0]
 80a0bd0:	07d2      	lsls	r2, r2, #31
 80a0bd2:	bf5c      	itt	pl
 80a0bd4:	2201      	movpl	r2, #1
 80a0bd6:	601a      	strpl	r2, [r3, #0]
 80a0bd8:	4b14      	ldr	r3, [pc, #80]	; (80a0c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0bda:	681a      	ldr	r2, [r3, #0]
 80a0bdc:	07d0      	lsls	r0, r2, #31
 80a0bde:	bf5c      	itt	pl
 80a0be0:	2201      	movpl	r2, #1
 80a0be2:	601a      	strpl	r2, [r3, #0]
 80a0be4:	4b12      	ldr	r3, [pc, #72]	; (80a0c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0be6:	681a      	ldr	r2, [r3, #0]
 80a0be8:	07d1      	lsls	r1, r2, #31
 80a0bea:	bf5c      	itt	pl
 80a0bec:	2201      	movpl	r2, #1
 80a0bee:	601a      	strpl	r2, [r3, #0]
 80a0bf0:	4b10      	ldr	r3, [pc, #64]	; (80a0c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0bf2:	681a      	ldr	r2, [r3, #0]
 80a0bf4:	07d2      	lsls	r2, r2, #31
 80a0bf6:	bf5c      	itt	pl
 80a0bf8:	2201      	movpl	r2, #1
 80a0bfa:	601a      	strpl	r2, [r3, #0]
 80a0bfc:	4b0e      	ldr	r3, [pc, #56]	; (80a0c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0bfe:	681a      	ldr	r2, [r3, #0]
 80a0c00:	07d0      	lsls	r0, r2, #31
 80a0c02:	bf5c      	itt	pl
 80a0c04:	2201      	movpl	r2, #1
 80a0c06:	601a      	strpl	r2, [r3, #0]
 80a0c08:	4b0c      	ldr	r3, [pc, #48]	; (80a0c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0c0a:	681a      	ldr	r2, [r3, #0]
 80a0c0c:	07d1      	lsls	r1, r2, #31
 80a0c0e:	bf5c      	itt	pl
 80a0c10:	2201      	movpl	r2, #1
 80a0c12:	601a      	strpl	r2, [r3, #0]
 80a0c14:	4b0a      	ldr	r3, [pc, #40]	; (80a0c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0c16:	681a      	ldr	r2, [r3, #0]
 80a0c18:	07d2      	lsls	r2, r2, #31
 80a0c1a:	bf5c      	itt	pl
 80a0c1c:	2201      	movpl	r2, #1
 80a0c1e:	601a      	strpl	r2, [r3, #0]
 80a0c20:	4770      	bx	lr
 80a0c22:	bf00      	nop
 80a0c24:	2000084c 	.word	0x2000084c
 80a0c28:	20000848 	.word	0x20000848
 80a0c2c:	20000844 	.word	0x20000844
 80a0c30:	20000840 	.word	0x20000840
 80a0c34:	2000083c 	.word	0x2000083c
 80a0c38:	20000838 	.word	0x20000838
 80a0c3c:	20000834 	.word	0x20000834
 80a0c40:	20000830 	.word	0x20000830

080a0c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0c44:	4b24      	ldr	r3, [pc, #144]	; (80a0cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0c46:	681a      	ldr	r2, [r3, #0]
 80a0c48:	07d0      	lsls	r0, r2, #31
 80a0c4a:	bf5c      	itt	pl
 80a0c4c:	2201      	movpl	r2, #1
 80a0c4e:	601a      	strpl	r2, [r3, #0]
 80a0c50:	4b22      	ldr	r3, [pc, #136]	; (80a0cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0c52:	681a      	ldr	r2, [r3, #0]
 80a0c54:	07d1      	lsls	r1, r2, #31
 80a0c56:	bf5c      	itt	pl
 80a0c58:	2201      	movpl	r2, #1
 80a0c5a:	601a      	strpl	r2, [r3, #0]
 80a0c5c:	4b20      	ldr	r3, [pc, #128]	; (80a0ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0c5e:	681a      	ldr	r2, [r3, #0]
 80a0c60:	07d2      	lsls	r2, r2, #31
 80a0c62:	bf5c      	itt	pl
 80a0c64:	2201      	movpl	r2, #1
 80a0c66:	601a      	strpl	r2, [r3, #0]
 80a0c68:	4b1e      	ldr	r3, [pc, #120]	; (80a0ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0c6a:	681a      	ldr	r2, [r3, #0]
 80a0c6c:	07d0      	lsls	r0, r2, #31
 80a0c6e:	bf5c      	itt	pl
 80a0c70:	2201      	movpl	r2, #1
 80a0c72:	601a      	strpl	r2, [r3, #0]
 80a0c74:	4b1c      	ldr	r3, [pc, #112]	; (80a0ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0c76:	681a      	ldr	r2, [r3, #0]
 80a0c78:	07d1      	lsls	r1, r2, #31
 80a0c7a:	bf5c      	itt	pl
 80a0c7c:	2201      	movpl	r2, #1
 80a0c7e:	601a      	strpl	r2, [r3, #0]
 80a0c80:	4b1a      	ldr	r3, [pc, #104]	; (80a0cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0c82:	681a      	ldr	r2, [r3, #0]
 80a0c84:	07d2      	lsls	r2, r2, #31
 80a0c86:	bf5c      	itt	pl
 80a0c88:	2201      	movpl	r2, #1
 80a0c8a:	601a      	strpl	r2, [r3, #0]
 80a0c8c:	4b18      	ldr	r3, [pc, #96]	; (80a0cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0c8e:	681a      	ldr	r2, [r3, #0]
 80a0c90:	07d0      	lsls	r0, r2, #31
 80a0c92:	bf5c      	itt	pl
 80a0c94:	2201      	movpl	r2, #1
 80a0c96:	601a      	strpl	r2, [r3, #0]
 80a0c98:	4b16      	ldr	r3, [pc, #88]	; (80a0cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0c9a:	681a      	ldr	r2, [r3, #0]
 80a0c9c:	07d1      	lsls	r1, r2, #31
 80a0c9e:	bf5c      	itt	pl
 80a0ca0:	2201      	movpl	r2, #1
 80a0ca2:	601a      	strpl	r2, [r3, #0]
 80a0ca4:	4b14      	ldr	r3, [pc, #80]	; (80a0cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0ca6:	681a      	ldr	r2, [r3, #0]
 80a0ca8:	07d2      	lsls	r2, r2, #31
 80a0caa:	bf5c      	itt	pl
 80a0cac:	2201      	movpl	r2, #1
 80a0cae:	601a      	strpl	r2, [r3, #0]
 80a0cb0:	4b12      	ldr	r3, [pc, #72]	; (80a0cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0cb2:	681a      	ldr	r2, [r3, #0]
 80a0cb4:	07d0      	lsls	r0, r2, #31
 80a0cb6:	bf5c      	itt	pl
 80a0cb8:	2201      	movpl	r2, #1
 80a0cba:	601a      	strpl	r2, [r3, #0]
 80a0cbc:	4b10      	ldr	r3, [pc, #64]	; (80a0d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0cbe:	681a      	ldr	r2, [r3, #0]
 80a0cc0:	07d1      	lsls	r1, r2, #31
 80a0cc2:	bf5c      	itt	pl
 80a0cc4:	2201      	movpl	r2, #1
 80a0cc6:	601a      	strpl	r2, [r3, #0]
 80a0cc8:	4b0e      	ldr	r3, [pc, #56]	; (80a0d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0cca:	681a      	ldr	r2, [r3, #0]
 80a0ccc:	07d2      	lsls	r2, r2, #31
 80a0cce:	bf5c      	itt	pl
 80a0cd0:	2201      	movpl	r2, #1
 80a0cd2:	601a      	strpl	r2, [r3, #0]
 80a0cd4:	4770      	bx	lr
 80a0cd6:	bf00      	nop
 80a0cd8:	2000087c 	.word	0x2000087c
 80a0cdc:	20000878 	.word	0x20000878
 80a0ce0:	20000874 	.word	0x20000874
 80a0ce4:	20000870 	.word	0x20000870
 80a0ce8:	2000086c 	.word	0x2000086c
 80a0cec:	20000868 	.word	0x20000868
 80a0cf0:	20000864 	.word	0x20000864
 80a0cf4:	20000860 	.word	0x20000860
 80a0cf8:	2000085c 	.word	0x2000085c
 80a0cfc:	20000858 	.word	0x20000858
 80a0d00:	20000854 	.word	0x20000854
 80a0d04:	20000850 	.word	0x20000850

080a0d08 <__cxa_atexit>:
 80a0d08:	b510      	push	{r4, lr}
 80a0d0a:	4c05      	ldr	r4, [pc, #20]	; (80a0d20 <__cxa_atexit+0x18>)
 80a0d0c:	4613      	mov	r3, r2
 80a0d0e:	b12c      	cbz	r4, 80a0d1c <__cxa_atexit+0x14>
 80a0d10:	460a      	mov	r2, r1
 80a0d12:	4601      	mov	r1, r0
 80a0d14:	2002      	movs	r0, #2
 80a0d16:	f3af 8000 	nop.w
 80a0d1a:	bd10      	pop	{r4, pc}
 80a0d1c:	4620      	mov	r0, r4
 80a0d1e:	bd10      	pop	{r4, pc}
 80a0d20:	00000000 	.word	0x00000000

080a0d24 <memcpy>:
 80a0d24:	b510      	push	{r4, lr}
 80a0d26:	1e43      	subs	r3, r0, #1
 80a0d28:	440a      	add	r2, r1
 80a0d2a:	4291      	cmp	r1, r2
 80a0d2c:	d004      	beq.n	80a0d38 <memcpy+0x14>
 80a0d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0d36:	e7f8      	b.n	80a0d2a <memcpy+0x6>
 80a0d38:	bd10      	pop	{r4, pc}

080a0d3a <memset>:
 80a0d3a:	4603      	mov	r3, r0
 80a0d3c:	4402      	add	r2, r0
 80a0d3e:	4293      	cmp	r3, r2
 80a0d40:	d002      	beq.n	80a0d48 <memset+0xe>
 80a0d42:	f803 1b01 	strb.w	r1, [r3], #1
 80a0d46:	e7fa      	b.n	80a0d3e <memset+0x4>
 80a0d48:	4770      	bx	lr

080a0d4a <strlen>:
 80a0d4a:	4603      	mov	r3, r0
 80a0d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0d50:	2a00      	cmp	r2, #0
 80a0d52:	d1fb      	bne.n	80a0d4c <strlen+0x2>
 80a0d54:	1a18      	subs	r0, r3, r0
 80a0d56:	3801      	subs	r0, #1
 80a0d58:	4770      	bx	lr

080a0d5a <link_code_end>:
	...

080a0d5c <dynalib_user>:
 80a0d5c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a0d6c:	0000 0000                                   ....

080a0d70 <_ZTV7TwoWire>:
	...
 80a0d78:	034d 080a 0397 080a 036f 080a 034f 080a     M.......o...O...
 80a0d88:	0377 080a 037f 080a 0387 080a 038f 080a     w...............

080a0d98 <_ZTV9IPAddress>:
	...
 80a0da0:	03df 080a 03d1 080a 03d3 080a 0066 6e6c     ............f.ln
 80a0db0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a0dc0:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a0dd0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a0de0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a0df0:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a0e00:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a0e10:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a0e20:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a0e30:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a0e40:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a0e50:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a0e60:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a0e70:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a0e80:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a0e90 <_ZTV8SPIClass>:
	...
 80a0e98:	0529 080a 052b 080a 005a 2b25 3330 3a64     )...+...Z.%+03d:
 80a0ea8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a0eb8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a0ec8:	0000 0000                                   ....

080a0ecc <_ZTV11USARTSerial>:
	...
 80a0ed4:	0581 080a 05a5 080a 05b1 080a 0455 080a     ............U...
 80a0ee4:	058d 080a 0599 080a 0593 080a 059f 080a     ................
 80a0ef4:	0583 080a 0587 080a                         ........

080a0efc <_ZTV9USBSerial>:
	...
 80a0f04:	0659 080a 069d 080a 0677 080a 0455 080a     Y.......w...U...
 80a0f14:	0671 080a 065b 080a 0663 080a 0697 080a     q...[...c.......
 80a0f24:	066b 080a 0655 080a                         k...U...

080a0f2c <_ZTVN5spark9WiFiClassE>:
	...
 80a0f34:	07c3 080a                                   ....

080a0f38 <link_const_variable_data_end>:
 80a0f38:	080a00ed 	.word	0x080a00ed
 80a0f3c:	080a0445 	.word	0x080a0445
 80a0f40:	080a050d 	.word	0x080a050d
 80a0f44:	080a0567 	.word	0x080a0567
 80a0f48:	080a056d 	.word	0x080a056d
 80a0f4c:	080a07cd 	.word	0x080a07cd
 80a0f50:	080a09f9 	.word	0x080a09f9
 80a0f54:	080a0a29 	.word	0x080a0a29
 80a0f58:	080a0a79 	.word	0x080a0a79
 80a0f5c:	080a0b3d 	.word	0x080a0b3d
 80a0f60:	080a0bc1 	.word	0x080a0bc1
 80a0f64:	080a0c45 	.word	0x080a0c45

080a0f68 <link_constructors_end>:
	...
